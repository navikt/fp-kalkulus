name: Bygg og deploy

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'LICENSE'
      - 'CODEOWNERS'
      - 'dokumentasjon/**'
      - 'lokalutvikling/**'

  schedule:
    - cron: '0 4 * * 1'

env:
  IMAGE_BASE: docker.pkg.github.com/${{ github.repository }}/ftkalkulus
  IMAGE_BASE_CR: ghcr.io/${{ github.repository }}
jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: ftkalkulus_unit
          POSTGRES_PASSWORD: ftkalkulus_unit
          POSTGRES_DB: ftkalkulus_unit
        ports:
          - 5433:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "TIMESTAMP=$(expr $(date +%Y%m%d%H%M%S))" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}

      - name: Build artifacts & deploy
        shell: bash
        run: |
          echo "Building artifacts $(echo $GITHUB_SHA | cut -c1-7)"
          mvn jacoco:prepare-agent deploy --quiet -e --batch-mode --settings ./.m2/settings.xml -DtrimStackTrace=false -Dmaven.wagon.http.pool=false --file pom.xml -Dchangelist= -Dsha1=-$(date +%Y.%m.%d.%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7) -Dfile.encoding=UTF-8 -DinstallAtEnd=true -DdeployAtEnd=true -Djacoco.destFile=$(pwd)/target/jacoco.exec
          ## mvn jacoco:report sonar:sonar --quiet -e --batch-mode --settings ./.m2/settings.xml --file pom.xml -Djacoco.dataFile=$(pwd)/target/jacoco.exec -Dsonar.projectKey="navikt_ft-kalkulus" -Dsonar.host.url='https://sonarcloud.io' -Dsonar.organization=navit -Dsonar.login=${SONAR_TOKEN}
          echo "Deployed artifacts"
          echo "TAG=$TIMESTAMP-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
        env:
          TZ: "Europe/Oslo"
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          DATASOURCE_HOST: localhost
          DATASOURCE_PORT: ${{ job.services.postgres.ports[5433] }} # get randomly assigned published port

      - name: Bygg og push docker-image
        run: |
          docker build --pull --tag ${IMAGE_BASE}:${TAG} --tag ${IMAGE_BASE}:latest --tag ${IMAGE_BASE_CR}:${TAG} --tag ${IMAGE_BASE_CR}:latest .
          echo "${{ secrets.GITHUB_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          echo "${{ secrets.GITHUB_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin ghcr.io
          docker push ${IMAGE_BASE}:${TAG}
          docker push ${IMAGE_BASE}:latest
          docker push ${IMAGE_BASE_CR}:${TAG}
          docker push ${IMAGE_BASE_CR}:latest

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: false
                  
      - name: Lukk gamle issues
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });
            
      -  name: Opprett deployment issue
         id: createdeployissue
         if: success()
         uses: actions/github-script@v3
         with:
           github-token: ${{secrets.GITHUB_TOKEN}}
           script: |
               github.issues.create( {
                 owner: context.issue.owner,
                 repo: context.issue.repo,
                 labels: ['deployment'],
                 body: 'Kommenter enten "/promote dev-fss default" eller "/promote prod-fss default"',
                 title: 'Deploy av ${{ env.TAG }}'})
               .then(response => {
                       core.setOutput('number', response.data.number);
                });
            
      - name: Trigger kalkulus verdikjede test
        if: success()
        shell: bash
        run: |
          curl -XPOST -u "x-access-token:${{secrets.GITHUB_ACCESS_TOKEN}}" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/navikt/ft-kalkulus-verdikjede/dispatches \
          --data '{"event_type": "beregning-verdikjede",
                   "client_payload": {
                      "trigger": "${{ github.repository }}",
                      "version": "${{ env.TAG }}",
                      "image": "${{ env.IMAGE }}",
                      "issue_number": "${{ steps.createdeployissue.outputs.number }}"
                  }}'

      - name: Trigger k9 verdikjede test
        shell: bash
        run: |
          curl -XPOST -u "x-access-token:${{secrets.GITHUB_ACCESS_TOKEN}}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/navikt/k9-verdikjede/actions/workflows/build.yml/dispatches \
          -d '{"ref":"master",
                  "inputs":{
                      "trigger": "${{ github.repository }}",
                      "version": "${{ env.TAG }}",
                      "issue_number": "${{ steps.createdeployissue.outputs.number }}"
                  }}'

